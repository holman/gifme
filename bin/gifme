#!/usr/bin/env ruby

require 'optparse'
require 'open-uri'
require 'fileutils'

def info(message)
  io = $stdout.tty? ? $stdout : $stderr
  io.puts message
end

def error(message)
  $stderr.puts message
end

timestamp = Time.now.strftime(fmt='%F_%Hh-%Mm-%Ss')

options = {
  :output   => "#{ENV['HOME']}/Desktop/animated-#{timestamp}.gif",
  :reverse  => false,
  :width    => 500,
  :delay    => 20,
  :cloudapp => system("which cloudapp 2>&1 > /dev/null")
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: gifme [options] FILES"

  opts.separator ""
  opts.separator "  FILES can be listed out, like `file1.jpg file2.jpg`, or it"
  opts.separator "  can be a normal shell glob, like `*.jpg`."

  opts.separator ""
  opts.separator "Options:"

  opts.on("-r", "--reverse", "Reverse the GIF to make it loopable") do |reverse|
    options[:reverse] = true
  end

  opts.on("-o", "--output /path/to/output", "Set the animation's output directory") do |out|
    options[:output] = out
  end

  opts.on("-d", "--delay DELAY", "Set the delay between frames (default: 20)") do |delay|
    options[:delay] = delay
  end

  opts.on("-w", "--width PIXELS", "Set the width of the image (default is 500px)") do |width|
    options[:width] = width
  end

  opts.on("-h", "--help", "Show this message") do
    info opts
    exit
  end
end

parser.parse!
files = *ARGV

unless system("which convert 2>&1 > /dev/null")
  error "You need to install ImageMagick first.\n\n" +
         "If you're on a Mac, this should be as easy as:" +
         "  brew install imagemagick"
  exit(1)
end

unless files
  error parser.help
  exit(1)
end

# WORKING WITH REMOTE FILES
if files.first[0..3] == 'http'
  path = "/tmp/downloaded-gifme.gif"
  open(path, 'wb') do |file|
    file << open(files.first).read
  end

  FileUtils.rm_rf "/tmp/gifme"
  FileUtils.mkdir "/tmp/gifme"
  system "cd /tmp/gifme && convert #{path} -coalesce frame_%03d.gif"

  files = Dir.entries("/tmp/gifme")
  files.delete(".")
  files.delete("..")
  files = files.collect{|f| "/tmp/gifme/#{f}"}
end

cmd  = ["convert"]
cmd << "-delay"  << options[:delay].to_s
cmd << "-loop"   << "0"
cmd << "-resize" << options[:width].to_s
cmd << "-layers" << "OptimizeTransparency"
cmd += files

if options[:reverse]
  cmd += files.reverse[1..-2]
end

cmd << options[:output]

if system(*cmd)
  info "You now have a handsome animation at #{options[:output]}"
else
  error "Something broke when we were animating your gif. Shit."
  exit(1)
end

unless $stdout.tty?
  $stdout.puts options[:output]
  exit
end

if options[:cloudapp]
  info "Now we're uploading it to CloudApp"
  system "cloudapp #{options[:output]}"
end
